#!/usr/bin/env ruby

require 'optparse'
require 'yaml'

def push_code(app_name)
  run!("git push --force git@heroku.com:#{app_name}.git HEAD:master")
end

def run_migrations(app_name)
  run_heroku_command!(app_name, 'run rake db:migrate')
end

def restart_dynos(app_name)
  run_heroku_command!(app_name, 'ps:restart')
end

def has_pending_migrations?(app_name)
  !run_heroku_command(app_name, 'run rake db:abort_if_pending_migrations')
end

def run_heroku_command!(app_name, command)
  success = run_heroku_command(app_name, command)
  raise "Heroku command '#{command}' failed" unless success
end

def run_heroku_command(app_name, command)
  cli_command = "heroku #{command} --app #{app_name}"
  if command.start_with?('run ')
    # If we're running a shell command, return the underlying
    # shell command exit code
    cli_command << ' --exit-code'
  end
  run(cli_command)
end

def run!(command)
  success = run(command)
  raise "Command '#{command}' failed" unless success
end

def run(command)
  puts command
  system(command)
end

HEROKU_CONFIG_FILE = File.absolute_path("#{__dir__}/../config/heroku.yml").freeze
raise "Missing config file #{HEROKU_CONFIG_FILE}" unless File.file?(HEROKU_CONFIG_FILE)
app_registry = YAML.load(File.read(HEROKU_CONFIG_FILE))

environment = nil
OptionParser.new do |parser|
  parser.on_tail('-h', '--help', 'Show this message') do
    puts parser
    exit
  end

  parser.on('-e', '--environment ENVIRONMENT',
            "The environment to deploy to. Must be in #{app_registry.keys.join(', ')}") do |arg|
    environment = arg
  end
end.parse!

raise OptionParser::MissingArgument.new('No environment specified') unless environment

app_name = app_registry.fetch(environment) do
  raise OptionParser::InvalidArgument.new("Invalid environment '#{environment}'. " \
    "Must be in #{app_registry.keys.join(', ')}")
end

puts "Pushing code to Heroku app #{app_name}"
push_code(app_name)

puts 'Checking for pending migrations'
if has_pending_migrations?(app_name)
  puts 'Running migrations'
  run_migrations(app_name)
  puts 'Restarting dynos'
  restart_dynos(app_name)
else
  puts 'No migrations required'
end
